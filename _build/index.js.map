{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/routes/newQuote.tsx", "../app/lib/Quotes.ts", "../app/lib/prisma.server.ts", "../app/lib/getCustomers.tsx", "../app/components/quoteElements.tsx", "../app/components/accentEls.tsx", "../app/routes/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["import { PassThrough } from \"stream\";\nimport type { EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n      request,\n      responseStatusCode,\n      responseHeaders,\n      remixContext\n    )\n    : handleBrowserRequest(\n      request,\n      responseStatusCode,\n      responseHeaders,\n      remixContext\n    );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(createReadableStreamFromReadable(body), {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(createReadableStreamFromReadable(body), {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(err: unknown) {\n          reject(err);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport {\n\tLinks,\n\tLiveReload,\n\tMeta,\n\tOutlet,\n\tScripts,\n\tScrollRestoration,\n} from \"@remix-run/react\";\nexport const meta: MetaFunction = () => [\n\t{\n\t\tcharset: \"utf-8\",\n\t\ttitle: \"rAGC\",\n\t\tviewport: \"width=device-width,initial-scale=1\",\n\t},\n];\n\nexport default function App() {\n\treturn (\n\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<Meta />\n\t\t\t\t<Links />\n\t\t\t</head>\n\t\t\t<body className=\"layout\">\n\t\t\t\t<Outlet />\n\t\t\t\t<ScrollRestoration />\n\t\t\t\t<Scripts />\n\t\t\t\t<LiveReload />\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n", "//#region ? ---------- Imports/Utilities ----------\nimport { LinksFunction } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport React from \"react\";\nimport { Quote, prepareUpdate } from \"~/lib/Quotes\";\nimport styles from \"~/styles/css/global.css\";\nimport {\n  allCustomers as customerList,\n  allMaterials as materialList } from\n\"../lib/getCustomers\";\nimport { tCustomer, tMaterial, tFormData } from \"~/lib/formTypes\";\nimport { SectionDetails } from \"~/components/quoteElements\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: styles.toString() }];\n\n// #endregion ? --------------------\n\n//#region ? ---------- loader data ----------\nexport async function loader() {\n  const customers = await customerList();\n  const materials = await materialList();\n  const quote = await prisma.quotes.findFirst({\n    orderBy: {\n      ID: \"desc\"\n    },\n    select: {\n      ID: true\n    }\n  });\n  return {\n    customers,\n    materials,\n    quote\n  };\n}\n// #endregion ? --------------------\n\nconst thisQuote = (ID: number) => new Quote(ID + 1);\n\nexport default function NewQuote() {\n  /* ! -------------------- LOADER DATA -------------------- */\n  //#region\n  const data: {\n    customers: tCustomer[];\n    materials: tMaterial[];\n    quote: {\n      ID: number;\n    };\n  } = useLoaderData<typeof loader>();\n  //#endregion\n\n  /* ! -------------------- STATE -------------------- */\n  //#region\n  const [quote, updateQuote] = React.useState(thisQuote(data.quote.ID));\n  const [notes, setNotes] = React.useState();\n  const [formData, setFormData] = React.useState({\n    customerSrc: \"\",\n    materialSrc: \"\",\n    customer: quote.customer,\n    material: quote.material,\n    process: [],\n    addedQty: 0,\n    notes: []\n  });\n  const newQuote = prepareUpdate(quote);\n  //#endregion\n\n  /* ! -------------------- HANDLE BUTTON CLICKS -------------------- */\n  //#region\n  function handleQtyChanges(\n  type: string,\n  params?: {newValue: number;index: number;qtys: any;})\n  {\n    switch (type) {\n      case \"add\":\n        newQuote.addQTY(formData.addedQty);\n        break;\n      case \"remove\":\n        break; //thisQuote.removeQTY(formData.addedQty);\n      case \"update\":\n        newQuote.updateQTY(params!.index, params!.newValue);\n    }\n    updateQuote(newQuote);\n  }\n  //#endregion\n\n  //#region ! ---------- COMPONENT DISPLAY ----------\n  return (\n    <main id=\"newQuote\">\n\t\t\t<h2>New Quote</h2>\n\t\t\t<form>\n\t\t\t\t{/* \u2190\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF DETAILS \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t<fieldset>\n\t\t\t\t\t<span id=\"dateCreated\">\n\t\t\t\t\t\t<b>Created:</b>\n\t\t\t\t\t\t{newQuote.dateCreated.toLocaleDateString()}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span id=\"quoteNumber\">\n\t\t\t\t\t\t<b>ID:</b>\n\t\t\t\t\t\t{newQuote.ID}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span id=\"salesRep\">\n\t\t\t\t\t\t<b>Rep:</b>{\" \"}\n\t\t\t\t\t</span>\n\t\t\t\t</fieldset>\n\t\t\t\t{/* \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t{/* todo */} {/* \u2190\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF CUSTOMER \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t<SectionDetails\n          quote={quote}\n          updateQuote={updateQuote}\n          newQuote={newQuote}\n          type=\"customer\" />\n\n\t\t\t\t{/* \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t{/* todo */} {/* \u2190\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF MATERIAL \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t<SectionDetails\n          quote={quote}\n          updateQuote={updateQuote}\n          newQuote={newQuote}\n          type=\"material\" />\n\n\t\t\t\t{/* <SectionDetails\n          currentSelection={formData.material}\n          optionList={data.materials}\n          setFormData={setFormData}\n          formData={formData}\n          queryDetails={{ searchBy: \"materialName\", returnBy: \"materialName\" }}\n          elementDetails={{\n          \ttype: \"material\",\n          \tid: \"materialDetails\",\n          \tsummary: \"Material\",\n          }}\n          thisQuote={thisQuote}\n          /> */}\n\t\t\t\t{/* \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t{/* todo */} {/* \u2190\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF PROCESS & MACHINES \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t<details id=\"processDetails\">\n\t\t\t\t\t<summary>\n\t\t\t\t\t\tDetails\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<button id=\"btnAddProcess\" type=\"button\">\n\t\t\t\t\t\t\t\t+ Add Process\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button id=\"btnAddMachine\" type=\"button\">\n\t\t\t\t\t\t\t\t+ Add Machine\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</summary>\n\t\t\t\t\t<div id=\"addedProcessList\"></div>\n\t\t\t\t</details>\n\t\t\t\t{/* \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t{/* \u2190\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF ADD QTY \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t<details id=\"addQtyDetails\">\n\t\t\t\t\t<summary>\n\t\t\t\t\t\tQuantities\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<input\n                id=\"addQty\"\n                name=\"addQty\"\n                type=\"number\"\n                min=\"1\"\n                placeholder=\"Qty\"\n                step=\"1\"\n                className=\"minWidth\"\n                onChange={(e) => {\n                  let newData = Object.assign({}, formData);\n                  newData.addedQty = parseInt(e.target.value);\n                  setFormData(newData);\n                }} />\n\n\t\t\t\t\t\t\t<button\n                id=\"btnAddQty\"\n                type=\"button\"\n                onClick={() => handleQtyChanges(\"add\")}>\n\n\t\t\t\t\t\t\t\t+ Add\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</summary>\n\t\t\t\t\t<div id=\"addedQtyList\">\n\t\t\t\t\t\t{quote.quantities.map((qtys, index) =>\n            <span key={index}>\n\t\t\t\t\t\t\t\t<input\n                type=\"number\"\n                min=\"1\"\n                placeholder=\"Qty\"\n                step=\"1\"\n                className=\"minWidth\"\n                defaultValue={qtys.amount}\n                onChange={(e) => {\n                  const newValue = parseInt(e.target.value);\n                  handleQtyChanges(\"update\", { index, newValue, qtys });\n                }} />\n\n\t\t\t\t\t\t\t\t<input\n              /* todo!!! */\n                type=\"number\"\n                min=\"0\"\n                placeholder=\"$0.000\"\n                step=\".0001\"\n                className=\"minWidth\"\n                onChange={() => {}}\n                /* todo!!! */ />\n\n\t\t\t\t\t\t\t</span>\n            )}\n\t\t\t\t\t</div>\n\t\t\t\t</details>\n\t\t\t\t{/* \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t{/* todo */} {/* \u2190\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF NOTES \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t\t<details open id=\"notesDetails\">\n\t\t\t\t\t<summary>Notes</summary>\n\t\t\t\t\t<textarea\n            id=\"notes\"\n            name=\"notes\"\n            placeholder=\"Enter Notes Here...\">\n          </textarea>\n\t\t\t\t</details>\n\t\t\t\t{/* \u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u23AF\u2192 */}\n\t\t\t</form>\n\t\t</main>);\n\n\n  // #endregion ! --------------------\n}\n\n//#region ! ---------- MATERIALS ----------\nfunction MaterialsDetails() {\n  return (\n    <details id=\"materialDetails\">\n\t\t\t<summary>\n\t\t\t\tMaterial\n\t\t\t\t<span>\n\t\t\t\t\t<input\n            type=\"search\"\n            id=\"srcMaterial\"\n            placeholder=\"Current Material\" />\n\n\t\t\t\t\t<button id=\"btnNewMaterial\" type=\"button\" className=\"addNew\">\n\t\t\t\t\t\t+ New\n\t\t\t\t\t</button>\n\t\t\t\t</span>\n\t\t\t</summary>\n\t\t</details>);\n\n}\n// #endregion ! --------------------", "import { Prisma } from \"@prisma/client\";\nimport { findCustomer } from \"~/lib/getCustomers\";\nimport { tMaterial, tCustomer, tQty, tProcess } from \"./formTypes\";\nimport { handleError } from \"./utils\";\n\nexport class Quote {\n\tID: number;\n\tdateCreated: Date;\n\tcustomer: tCustomer | null;\n\tmaterial: tMaterial[] | null;\n\tprocess: tProcess[] | null;\n\tquantities: {\n\t\tamount: number;\n\t\tprice: number;\n\t}[];\n\tconstructor(\n\t\tquoteID: number,\n\t\tdate?: Date,\n\t\tcustomer?: tCustomer,\n\t\tmaterial?: tMaterial[],\n\t\tprocess?: tProcess[],\n\t\tquantities?: tQty[]\n\t) {\n\t\tthis.ID = quoteID;\n\t\tthis.dateCreated = date ? date : new Date();\n\t\tthis.quantities = quantities ? quantities : [];\n\t\tthis.material = material ? material : [];\n\t\tthis.customer = customer ? customer : null;\n\t\tthis.process = process ? process : [];\n\t}\n\n\t//#region ? ---------- CUSTOMER ----------\n\tclearCustomer() {\n\t\tthis.customer = null;\n\t}\n\n\tsetCustomer(customer: string) {\n\t\t//\n\t}\n\n\t// #endregion ? --------------------\n\n\t//#region ? ---------- MATERIAL ----------\n\tclearMaterial() {\n\t\tthis.material = [];\n\t}\n\n\taddMaterial(material: tMaterial) {\n\t\tif (this.material == null) {\n\t\t\tthis.material = [];\n\t\t}\n\t\tthis.material.push(material);\n\t}\n\t// #endregion ? --------------------\n\n\t//#region ? ---------- PROCESS ----------\n\n\t// #endregion ? --------------------\n\n\t//#region ? ---------- QUANTITIES ----------\n\tupdateQTY(id: number, quantity: number) {\n\t\tthis.quantities[id].amount = quantity;\n\t}\n\n\taddQTY(qty: number) {\n\t\tthis.quantities.push({ amount: qty, price: 0 });\n\t}\n\t// #endregion ? --------------------\n}\n\nexport const prepareUpdate = (oldQuote: Quote): Quote => {\n\tconst updated = Object.assign(\n\t\tnew Quote(oldQuote.ID, oldQuote.dateCreated),\n\t\toldQuote\n\t);\n\n\treturn updated;\n};\n", "import { PrismaClient } from \"@prisma/client\";\n\nlet prisma: PrismaClient;\n\ndeclare global {\n  var prisma: PrismaClient;\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\n// in production we'll have a single connection to the DB.\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n} else {\n  if (!global.prisma) {\n    global.prisma = new PrismaClient();\n  }\n  prisma = global.prisma;\n  prisma.$connect();\n}\n\nexport { prisma };", "import { prisma } from \"~/lib/prisma.server\";\nimport { customers } from \"@prisma/client\";\nimport { tCustomer, tMaterial } from \"~/lib/formTypes\";\n\n//#region ? ---------- CUSTOMER QUERIES ----------\nexport const allCustomers = async () => {\n\treturn await prisma.customers.findMany({});\n};\n\nexport const findCustomer = async (search: string | number) => {\n\tconst data = await prisma.customers.findMany({\n\t\twhere: {\n\t\t\tOR: [\n\t\t\t\t{\n\t\t\t\t\tcustomerName: {\n\t\t\t\t\t\tcontains: search as string,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tID: search as number,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t});\n\treturn data as tCustomer[];\n};\n\nexport const customer = async (customerID: number) => {\n\tconst data = await prisma.customers.findFirst({\n\t\twhere: {\n\t\t\tID: customerID,\n\t\t},\n\t});\n\treturn data as tCustomer;\n};\n\nexport const updateCustomer = async (customer: customers) => {\n\tconst data: tCustomer = await prisma.customers.update({\n\t\twhere: {\n\t\t\tID: customer.ID,\n\t\t},\n\t\tdata: {\n\t\t\tcustomerName: customer.customerName,\n\t\t\taddress1: customer.address1,\n\t\t\taddress2: customer.address2,\n\t\t\tcity: customer.city,\n\t\t\tstate: customer.state,\n\t\t\tzip: customer.zip,\n\t\t},\n\t});\n\n\treturn data as tCustomer;\n};\n// #endregion ? --------------------\n\n//#region ? ---------- MATERIAL QUERIES ----------\nexport const allMaterials = async () => {\n\tconst data = {\n\t\tmaterials: await prisma.materials.findMany({}),\n\t};\n\treturn data.materials as tMaterial[];\n};\n// #endregion ? --------------------\n", "import { useLoaderData } from \"@remix-run/react\";\nimport { Quote, prepareUpdate } from \"~/lib/Quotes\";\nimport { tCustomer, tMaterial } from \"~/lib/formTypes\";\nimport {\n\tallCustomers as customerList,\n\tallMaterials as materialList,\n} from \"~/lib/getCustomers\";\n//import { SearchDataList } from \"./SearchForm\";\nimport React from \"react\";\nimport { OnClickHeader } from \"./accentEls\";\n\nexport async function loader() {\n\tconst customers = await customerList();\n\tconst materials = await materialList();\n\treturn {\n\t\tcustomers,\n\t\tmaterials,\n\t};\n}\n\nfunction typeChoices(type: string) {\n\tswitch (type) {\n\t\tcase \"customer\":\n\t\t\treturn {\n\t\t\t\tby: \"customerName\",\n\t\t\t\tid: \"customerDetails\",\n\t\t\t\tsummary: \"Customer\",\n\t\t\t};\n\t\tcase \"material\":\n\t\t\treturn {\n\t\t\t\tby: \"material\",\n\t\t\t\tid: \"materialDetails\",\n\t\t\t\tsummary: \"Material\",\n\t\t\t};\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid type: ${type}`);\n\t}\n}\n\nconst searchQuery = (\n\tfilterData: { by: string | number; search: string },\n\tsearchList: any[]\n) => {\n\ttry {\n\t\treturn searchList.filter((item: any) =>\n\t\t\titem[filterData.by]\n\t\t\t\t.toLowerCase()\n\t\t\t\t.includes(filterData.search.toLowerCase())\n\t\t);\n\t} catch (e) {\n\t\tconsole.log(e, searchList);\n\t\treturn [];\n\t}\n};\n\nexport function SectionDetails({\n\tquote,\n\tupdateQuote,\n\tnewQuote,\n\ttype,\n}: {\n\tquote: Quote;\n\tupdateQuote: (quote: Quote) => void;\n\tnewQuote: Quote;\n\ttype: string;\n}) {\n\tconst data: {\n\t\tcustomers: tCustomer[];\n\t\tmaterials: tMaterial[];\n\t} = useLoaderData<typeof loader>();\n\n\ttry {\n\t\tconst { by, id, summary } = typeChoices(type);\n\t\tconst searchList = data[(type + \"s\") as keyof typeof data];\n\t\tconst [searchData, filterData] = React.useState(searchList);\n\n\t\tconst handleSearch = (thisSearch: any) => {\n\t\t\tif (thisSearch.length >= 2) {\n\t\t\t\tfilterData(searchQuery({ by: by, search: thisSearch }, searchList));\n\t\t\t}\n\t\t};\n\n\t\tconst handleBlur = (thisPick: any) => {\n\t\t\tconst selection = searchQuery({ by: by, search: thisPick }, searchList);\n\t\t\tif (selection.length === 1) {\n\t\t\t\ttype === \"customer\"\n\t\t\t\t\t? (newQuote.customer = selection[0])\n\t\t\t\t\t: newQuote.addMaterial(selection[0]);\n\t\t\t\tupdateQuote(newQuote);\n\t\t\t} else if (thisPick.length == 0) {\n\t\t\t\ttype === \"customer\" ? newQuote.clearCustomer() : null; //newQuote.clearMaterial();\n\t\t\t\tupdateQuote(newQuote);\n\t\t\t}\n\t\t};\n\n\t\t//SearchDataList(formData.customerSrc);\n\t\treturn (\n\t\t\t<details id={id}>\n\t\t\t\t<summary>\n\t\t\t\t\t{summary}\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tid={type + \"Search\"}\n\t\t\t\t\t\t\tname={type + \"Search\"}\n\t\t\t\t\t\t\tlist={type + \"SrcList\"}\n\t\t\t\t\t\t\tplaceholder={\"Current \" + type[0].toUpperCase() + type.slice(1)}\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\thandleSearch(e.target.value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonBlur={(e) => {\n\t\t\t\t\t\t\t\thandleBlur(e.target.value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<datalist id={type + \"SrcList\"}>\n\t\t\t\t\t\t\t<SearchDataList data={searchData} by={by} />\n\t\t\t\t\t\t</datalist>\n\t\t\t\t\t\t<button id=\"btnNewCustomer\" type=\"button\" className=\"addNew\">\n\t\t\t\t\t\t\t+ New\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</span>\n\t\t\t\t</summary>\n\t\t\t\t{type === \"customer\" ? (\n\t\t\t\t\t<CustomerSelection customer={quote.customer} />\n\t\t\t\t) : (\n\t\t\t\t\t<MaterialSelection material={quote.material} />\n\t\t\t\t)}\n\t\t\t</details>\n\t\t);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n}\n\nfunction SearchDataList({\n\tdata,\n\tby,\n}: {\n\tdata: tCustomer[] | tMaterial[];\n\tby: string;\n}) {\n\treturn data.map((ea: any) => (\n\t\t<option key={ea.ID} label={ea[by as keyof typeof ea]}>\n\t\t\t{ea[by as keyof typeof ea]}\n\t\t</option>\n\t));\n}\n\nfunction CustomerSelection({ customer }: { customer: tCustomer | null }) {\n\tif (!customer) return null;\n\treturn (\n\t\t<div>\n\t\t\t<h3>{customer.customerName}</h3>\n\t\t\t<p>\n\t\t\t\t{customer.address1}\n\t\t\t\t<br />\n\t\t\t\t{customer.address2}\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t{customer.city}, {customer.state} {customer.zip}\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n\nfunction MaterialSelection({ material }: any) {\n\tif (material.length >= 1) {\n\t\treturn material.map((item: tMaterial, index: number) => {\n\t\t\treturn (\n\t\t\t\t<div key={index}>\n\t\t\t\t\t<OnClickHeader\n\t\t\t\t\t\tclassName=\"headerMat\"\n\t\t\t\t\t\theaderText={item.material}\n\t\t\t\t\t\tclickInner=\"X\"\n\t\t\t\t\t\tclickFunction={() => {}}\n\t\t\t\t\t/>\n\t\t\t\t\t<h3\n\t\t\t\t\t\tclassName=\"headerMat\"\n\t\t\t\t\t\tstyle={{ display: \"flex\", justifyContent: \"space-between\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{item.material}\n\t\t\t\t\t\t<span>X</span>\n\t\t\t\t\t</h3>\n\t\t\t\t\t<p>{item.description}</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t} else return null;\n}\n", "import { LinksFunction } from \"@remix-run/node\";\nimport style from \"~/styles/css/accentEls.css\";\n\nexport const styles: LinksFunction = () => [\n{ rel: \"stylesheet\", href: style.toString() }];\n\n\nexport const OnClickHeader = ({\n  headerText,\n  clickInner,\n  className,\n  clickFunction\n\n\n\n\n\n}: {headerText: string;clickInner: any;className: string;clickFunction: any;}) => {\n  return (\n    <h3 className={className}>\n\t\t\t{headerText}\n\t\t\t<button type=\"button\" onClick={() => clickFunction}>\n\t\t\t\t{clickInner}\n\t\t\t</button>\n\t\t</h3>);\n\n};", "import { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { prisma } from \"~/lib/prisma.server\";\n\nexport async function loader() {\n\tconst feed = await prisma.customers.findMany({\n\t\tselect: {\n\t\t\tID: true,\n\t\t\tcustomerName: true,\n\t\t},\n\t});\n\n\treturn json({ feed });\n}\n\nexport default function Index() {\n\tconst { feed } = useLoaderData<typeof loader>();\n\treturn (\n\t\t<div className=\"page\">\n\t\t\t<main>\n\t\t\t\t{feed.map((x: any) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={x.ID} className=\"post\">\n\t\t\t\t\t\t\t{x.customerName}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n", "export default {'entry':{'module':'/build/entry.client-HSR56S75.js','imports':['/build/_shared/chunk-ZWGWGGVF.js','/build/_shared/chunk-COGLZBDS.js','/build/_shared/chunk-GIAAE3CH.js','/build/_shared/chunk-XU7DNSPJ.js','/build/_shared/chunk-SWY5ICHL.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-BOXFZXVX.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-I2GEKSHJ.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':'index','index':undefined,'caseSensitive':undefined,'module':'/build/routes/index-YLQECT4I.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/newQuote':{'id':'routes/newQuote','parentId':'root','path':'newQuote','index':undefined,'caseSensitive':undefined,'module':'/build/routes/newQuote-JHNCV2VF.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'7e828d98','hmr':{'runtime':'/build/_shared/chunk-SWY5ICHL.js','timestamp':1714256109924},'url':'/build/manifest-7E828D98.js'};", "\nimport * as entryServer from \"/Users/brittanycartmell/Desktop/quote/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/newQuote.tsx\";\nimport * as route2 from \"./routes/index.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false,\"unstable_singleFetch\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/newQuote\": {\n      id: \"routes/newQuote\",\n      parentId: \"root\",\n      path: \"newQuote\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: \"index\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    }\n  };"],
  "mappings": "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",
  "names": ["jsxDEV", "useLoaderData", "React", "process", "prisma", "prisma", "prisma", "jsxDEV", "jsxDEV", "jsxDEV", "jsxDEV", "jsxDEV", "useLoaderData", "React", "loader", "useLoaderData", "jsxDEV", "loader", "prisma", "useLoaderData"]
}
